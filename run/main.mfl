use "secondary"
use "maths"

container Lliw(red, green, blue, alpha) {
    meth getRed() {
        return this::red
    }

    meth getGreen() {
        return this::green
    }

    meth getBlue() {
        return this::blue
    }

    meth getAlpha() {
        return this::alpha
    }

    meth test() {
        return Lliw(this::red + 5, this::green, this::blue, this::alpha)
    }
}

meth test_func() {
    return 5
}

meth main(args) {
    const lliw = Lliw(74, 255, 255, 255)

    std::println(lliw::getRed())
    std::println(lliw::test_func())
    std::println(lliw::getBlue())

    // HERE!
    std::println(lliw::test()::getRed())

    lliw::red = 23
    std::println(lliw::red)

    const person = secondary::Person("John Doe", 23)
    person::say_name()

    mut a = 6
    std::println(a)
    a /= 3
    std::println(a)

    const list = [4, 7, 2, 5, 3]

    for (a in list) {
        std::println(a)
    }

    const list2 = ["string1", "string2", "string3"]

    for (i in list2) {
        if (std::equalsIgnoreCase(i, "string2")) {
            continue
        }

        std::println(i)
    }

    for (i = 0 to 5) {
        std::println(i)
    }

    for (i = 0 to 6, step = 2) {
        std::println(i)
    }

    std::println("Hello, world!")
    testing::test()

    mut n = 0

    while (true) {
        std::println(n)

        n = n + 1

        if (n == 6) {
            break
        }
    }

    std::println(testing::integer)

    testing::integer = 5

    std::println(testing::integer)

    const inpA = std::stringToBool(std::input())
    const inpB = std::stringToBool(std::input())

    if (inpA) {
        std::println("A")
    } elseif (inpB) {
        std::println("B")
    } else {
        std::println("Neither")
    }

    if (true) {
        mut c = true
        std::println(c)
    }

    // std::println(c) // will throw an error
}